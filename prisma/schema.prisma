// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  REGULAR
  SHOP
  ADMIN
  OWNER
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  fullName      String
  role          UserRole   @default(REGULAR)
  password      String?
  resetToken    String?    @unique
  resetTokenExpiry DateTime?
  accounts      Account[]
  sessions      Session[]
  packages      Package[]  @relation("UserPackages")
  shopPackages  Package[]  @relation("ShopPackages")
  wallet        Wallet?
  blogPosts     blogPost[]
  orders        Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Package {
  id             String   @id @default(cuid())
  trackingNumber String   @unique
  status         String   @default("PENDING")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String
  shopId         String
  user           User     @relation("UserPackages", fields: [userId], references: [id])
  shop           User     @relation("ShopPackages", fields: [shopId], references: [id])
}

model Wallet {
  id          String   @id @default(cuid())
  userId      String   @unique
  balance     Float    @default(0)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Transaction {
  id          String   @id @default(cuid())
  walletId    String
  amount      Float
  type        String   // CREDIT or DEBIT
  reason      String
  wallet      Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
}

model blogPost {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  itemLink  String?
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id              String   @id @default(cuid())
  purchaseSite    String
  purchaseLink    String
  phoneNumber     String
  notes           String?
  additionalInfo  String?
  status          String   @default("PENDING")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          String
  user            User     @relation(fields: [userId], references: [id])
}
